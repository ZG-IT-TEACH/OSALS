<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

        <!--spring中的依赖注入：Dependency Injection
            IOC的作用：降低程序见得耦合（依赖关系）
            依赖关系的管理：spring来维护
            在当前类需要使用其他类的对象时，由spring为我们提供，我们只需要在配置文件中说明
            依赖关系的维护——依赖注入
                依赖注入：
                    能注入的数据有三类
                        基本类型和Spring
                        其他bean类型（在配置文件中活着注解配置过的bean）
                        复杂类型/集合类型
                    注入的方式：
                        1：使用构造函数提供
                        2.使用set方法提供
                        3.使用注解提供
        -->
        <!--
            构造函数注入：
            使用的标签：constructor-arg
            标签出现的位置，bean的标签内部
            标签的属性：
                type：用于指定要注入的数据类型，该数据类型也是构造函数中的某个或某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引的参数赋值，0开始
                name：用于指定给构造函数中指定的参数赋值
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他bean类型是数据，他值得就是在spring的IOC核心容器中出现过的bean对象

                优势：在获取bean对象时，注入数据必须操作，否则无法创建
                劣势：改变了bean对象的实例化方法，使我们在创建对象时，如果用不到这些数据也必须输入

        <bean id = "accountService" class = "com.itheima.service.impl.AccountServiceImpl" >
            <constructor-arg name="age" value="18"></constructor-arg>
            <constructor-arg name="name" value="小张"></constructor-arg>
            <constructor-arg name="birthday" ref="day"></constructor-arg>
            <bean id="day" class="java.util.Date"></bean>
        </bean>
        -->
        <!--set方法注入
            涉及的标签：property
            出现的位置：bean标签的内部
            标签的属性：
                name：用于指定注入的所调用的set方法名称
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据，他指定的就是在spring的IOC核心容器中出现过的bean对象
            优势：
                创建对象时没有明确的限制，可以直接使用默认构造函数
            弊端：
                如果某个成员必须有值，则获取的对象是有可能set方法没有执行

        <bean id="day" class="java.util.Date"></bean>
        <bean id="accountService2" class="com.itheima.service.impl.AccountServiceImpl2">
            <property name="age" value="100"></property>
            <property name="name" value="张成文"></property>
            <property name="birthday" ref="day"></property>
        </bean>
    -->
    <!--复杂类型的注入/集合类型的注入
        用于给List注入的标签有
            List、array、set
        用于给Map注入的标签
            map、propes
        结构相同、标签可以互换
    -->
    <bean id="accountService3" class="com.itheima.service.impl.AccountServiceImpl3">
        <property name="myStr">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="mySet">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="AAA"></entry>
                <entry key="testB" value="BBB"></entry>
                <entry key="testC">
                    <value>CCC</value>
                </entry>
            </map>
        </property>
        <property name="myProps">
            <map>
                <entry key="testA" value="AAA"></entry>
                <entry key="testB" value="BBB"></entry>
                <entry key="testC">
                    <value>CCC</value>
                </entry>
            </map>
        </property>
    </bean>

    </beans>